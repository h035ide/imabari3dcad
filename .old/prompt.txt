## API仕様書変換プロンプト

以下のプロンプトを使用して、日本語のAPI仕様書をJSDoc形式に変換してください：

---

**入力**: 日本語で書かれたAPI関数仕様書（api 1.txt形式）

**出力**: JSDoc形式のAPIドキュメント（api_document.txt形式）

**変換ルール**:

### 1. 基本構造
- 各関数を`/**`と`*/`で囲む
- 関数の説明文を最初に配置（「〜します。」の形式）
- 各タグを`* `で始める

### 2. 関数定義の変換
```
入力: 〇[機能名]の作成
出力: /**
 * [機能名]を作成します。
 * @function [関数名]
```

### 3. パラメータの変換
```
入力: [パラメータ名], // [型]：[説明]
出力: * @param {[型]} [パラメータ名] - [説明]
```

### 4. 戻り値の変換
```
入力: 返り値:[説明]
出力: * @returns {[型]} [説明]
```

### 5. オブジェクト属性の変換（戻り値の型定義用）
```
入力: [属性名] // [型]：[説明]
出力: * @property {[型]} [属性名] - [説明]
```

### 6. オブジェクト型の戻り値の詳細定義
関数がオブジェクトを返す場合、そのオブジェクトの構造を別途定義する：

```
/**
 * [関数名]が返すオブジェクトの構造を定義します。
 * @typedef {Object} [オブジェクト名]
 * @property {[型]} [属性名] - [説明]
 * @property {[型]} [属性名] - [説明]
 * ...
 */
```

### 7. 型の表記ルール
- `文字列` → `{文字列}`
- `浮動小数点` → `{浮動小数点}`
- `整数` → `{整数}`
- `bool` → `{bool}`
- `長さ` → `{長さ}`
- `角度` → `{角度}`
- `方向` → `{方向}`
- `要素` → `{要素}`
- `要素(配列)` → `{要素(配列)}`
- `要素ID` → `{要素ID}`
- `要素グループ` → `{要素グループ}`
- `材料` → `{材料}`
- `平面` → `{平面}`
- `点` → `{点}`
- `点(2D)` → `{点(2D)}`
- `注記スタイル` → `{注記スタイル}`
- `オペレーションタイプ` → `{オペレーションタイプ}`
- `厚み付けタイプ` → `{厚み付けタイプ}`
- `関連設定` → `{関連設定}`
- `形状タイプ` → `{形状タイプ}`
- `形状パラメータ` → `{形状パラメータ}`
- `モールド位置` → `{モールド位置}`
- `スイープ方向` → `{スイープ方向}`
- `勾配２のタイプ` → `{勾配２のタイプ}`
- `位置と角度配列` → `{位置と角度配列}`
- `範囲` → `{範囲}`
- `BSTR` → `{BSTR}`
- `変数単位` → `{変数単位}`
- `方向(2D)` → `{方向(2D)}`
- `浮動小数点(配列)` → `{浮動小数点(配列)}`
- `要素ID(配列)` → `{要素ID(配列)}`

### 8. 特殊な処理
- 空文字可の表記は「（空文字可）」として維持
- コメント内の改行は保持
- 複数のパラメータは個別の@paramタグで記述
- 配列型のパラメータは「(配列)」の表記を維持
- 戻り値がない場合は@returnsタグを省略
- オブジェクトを返す関数は、そのオブジェクトの構造を@typedefで定義

### 9. 変換例

#### 基本関数の例
```
入力:
〇変数要素の作成
メソッド: CreateVariable
返り値: 作成された変数要素の要素ID
パラメータ:
- VariableName (文字列): 作成する変数名称（空文字不可）
- VariableValue (浮動小数点): 変数の値

出力:
/**
 * 変数要素を作成します。
 * @function CreateVariable
 * @param {文字列} VariableName - 作成する変数名称（空文字不可）
 * @param {浮動小数点} VariableValue - 変数の値
 * @returns {要素ID} 作成された変数要素の要素ID
 */
```

#### オブジェクトを返す関数の例
```
入力:
〇押し出しパラメータオブジェクトの作成
メソッド: CreateLinearSweepParam
返り値: 押し出しパラメータオブジェクト
オブジェクト属性:
- NAME (文字列): 要素名（空文字可）
- ElementGroup (要素グループ): 要素グループ指定

出力:
/**
 * 押し出しパラメータオブジェクトを作成します。
 * @function CreateLinearSweepParam
 * @returns {押し出しパラメータオブジェクト} 押し出しパラメータオブジェクト
 */

/**
 * 押し出しパラメータオブジェクトの構造を定義します。
 * @typedef {Object} 押し出しパラメータオブジェクト
 * @property {文字列} NAME - 要素名（空文字可）
 * @property {要素グループ} ElementGroup - 要素グループ指定
 */
```

### 10. 品質チェック
- すべての関数が@functionタグを持つ
- すべてのパラメータが@paramタグを持つ
- 戻り値がある場合は@returnsタグを持つ
- オブジェクトを返す関数は@typedefで構造を定義
- 型情報は{}で囲まれている
- 説明文の前に「-」が付いている
- 関数名は英語で記述
- 説明文は日本語で記述